if !Kernel.const_defined?(:Knj)
  require "rubygems"
  require "knjrbfw"
end

class FCKeditor
	# Name of the FCKeditor instance.
  attr_accessor :InstanceName
  
	# Path to FCKeditor relative to the document root.
	attr_accessor :BasePath
  
	# Width of the FCKeditor.
	# Examples: 100%, 600
  attr_accessor :Width
  
	# Height of the FCKeditor.
	# Examples: 400, 50%
	attr_accessor :Height
  
	# Name of the toolbar to load.
	attr_accessor :ToolbarSet
  
	# Initial value.
	attr_accessor :Value

	# This is where additional configuration can be passed.
	# Example:
	# $oFCKeditor->Config['EnterMode'] = 'br';
	attr_reader :Config

	# Main Constructor.
	# Refer to the _samples/php directory for examples.
	#
	# @param string $instanceName
	def initialize(instanceName)
		if Object.respond_to?(:_get, true)
			@get = _get
			@useragent = _meta["HTTP_USER_AGENT"]
		else
			Knj::Web::global_params
			@get = $_GET
			@useragent = Apache.request.headers_in["User-Agent"]
		end
		
		@InstanceName = instanceName
		@BasePath = '/fckeditor/'
		@Width = '100%'
		@Height = '200'
		@ToolbarSet	= 'Default'
		@Value = ''
		@Config = []
	end
	
	# Display FCKeditor.
	def Create
		print self.CreateHtml
	end
	
	def self.is_null?(fckstr)
    fckstr = fckstr.to_s.strip
    return true if fckstr.length <= 0 or fckstr == "&nbsp;"
    return false
  end
	
	# Return the HTML code required to run FCKeditor.
	#
	# @return string
	def CreateHtml
		@HtmlValue = htmlspecialchars(@Value)
		@Html = ''
		
		if self.IsCompatible
			if Php4r.isset(@get['fcksource']) and @get['fcksource'] == "true"
				filevar = 'fckeditor.original.html'
			else
				filevar = 'fckeditor.html'
			end
			
			linkvar = "#{@BasePath}editor/#{filevar }?InstanceName=#{@InstanceName}"
			
			if @ToolbarSet != ''
				linkvar += "&amp;Toolbar=#{@ToolbarSet}"
			end
			
			# Render the linked hidden field.
			@Html += "<input type=\"hidden\" id=\"#{@InstanceName}\" name=\"#{@InstanceName}\" value=\"#{@HtmlValue}\" style=\"display:none\" />"
			
			# Render the configurations hidden field.
			@Html += "<input type=\"hidden\" id=\"#{@InstanceName}___Config\" value=\"#{self.GetConfigFieldString}\" style=\"display:none\" />"
			
			# Render the editor IFRAME.
			@Html += "<iframe id=\"#{@InstanceName}___Frame\" src=\"#{linkvar}\" width=\"#{@Width}\" height=\"#{@Height}\" frameborder=\"0\" scrolling=\"no\"></iframe>"
		else
			if Php4r.strpos(@Width, '%') == false
				@Width = @Width + 'px'
			else
				@Width = @Width
			end
			
			if Php4r.strpos(@Height, '%') == false
				@Height = @Height.to_s + 'px'
			else
				@Height = @Height
			end
			
			@Html += "<textarea name=\"#{@InstanceName}\" rows=\"4\" cols=\"40\" style=\"width: #{@Width}; height: #{@Height}\">#{@HtmlValue}</textarea>"
		end

		return @Html
	end
	
	# Returns true if browser is compatible with FCKeditor.
	#
	# @return boolean
	def IsCompatible
		sAgent = @useragent
		
		if Php4r.strpos(sAgent, 'MSIE') != false and Php4r.strpos(sAgent, 'mac') == false and Php4r.strpos(sAgent, 'Opera') == false
			iVersion = Php4r.substr(sAgent, strpos(sAgent, 'MSIE') + 5, 3).to_f
			return (iVersion >= 5.5)
		elsif Php4r.strpos(sAgent, 'Gecko/') != false
			iVersion = Php4r.substr(sAgent, strpos(sAgent, 'Gecko/') + 6, 8)
			return (iVersion.to_i >= 20030210)
		elsif Php4r.strpos(sAgent, 'Opera/') != false
			fVersion = Php4r.substr(sAgent, strpos(sAgent, 'Opera/') + 6, 4)
			return (fVersion >= 9.5)
		elsif sAgent and sAgent.match(/AppleWebKit\/([0-9]+)/)
			matches = sAgent.match(/AppleWebKit\/([0-9]+)/)
			return (matches[1].to_i >= 522)
		else
			return false
		end
	end
	
	# Get settings from Config array as a single string.
	#
	# @access protected
	# @return string
	def GetConfigFieldString
		sParams = ''
		bFirst = true
		
		@Config.each do |sKey, sValue|
			if bFirst == false
				sParams += '&amp;'
			else
				bFirst = false
			end
			
			if sValue == true
				sParams += "#{self.EncodeConfig(sKey)}=true"
			elsif sValue == false
				sParams += "#{self.EncodeConfig(sKey)}=false"
			else
				sParams += "#{self.EncodeConfig(sKey)}=#{self.EncodeConfig(sValue)}"
			end
		end
		
		return sParams
	end
	
	# Encode characters that may break the configuration string
	# generated by GetConfigFieldString().
	#
	# @access protected
	# @param string $valueToEncode
	# @return string
	def EncodeConfig(valueToEncode)
		chars = {
			'&' => '%26',
			'=' => '%3D',
			'"' => '%22'
		}
		
		return Php4r.strtr(valueToEncode, chars)
	end
end