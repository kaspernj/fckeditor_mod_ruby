require "knj/autoload"

class FCKeditor
	include Knj::Php
	
	# Name of the FCKeditor instance.
	#
	# @access protected
	# @var string

	# public $InstanceName

	# Path to FCKeditor relative to the document root.
	#
	# @var string

	# public $BasePath

	# Width of the FCKeditor.
	# Examples: 100%, 600
	#
	# @var mixed

	# public $Width

	# Height of the FCKeditor.
	# Examples: 400, 50%
	#
	# @var mixed

	# public $Height

	# Name of the toolbar to load.
	#
	# @var string

	# public $ToolbarSet

	# Initial value.
	#
	# @var string

	# public $Value

	# This is where additional configuration can be passed.
	# Example:
	# $oFCKeditor->Config['EnterMode'] = 'br';
	#
	# @var array

	# public $Config

	# Main Constructor.
	# Refer to the _samples/php directory for examples.
	#
	# @param string $instanceName
	def initialize(instanceName)
		if Object.respond_to?(:_get, true)
			@get = _get
			@useragent = _meta["HTTP_USER_AGENT"]
		else
			Knj::Web::global_params
			@get = $_GET
			@useragent = Apache.request.headers_in["User-Agent"]
		end
		
		@InstanceName = instanceName
		@BasePath = '/fckeditor/'
		@Width = '100%'
		@Height = '200'
		@ToolbarSet	= 'Default'
		@Value = ''
		@Config = []
	end
	
	# Display FCKeditor.
	def Create
		print self.CreateHtml
	end
	
	# Return the HTML code required to run FCKeditor.
	#
	# @return string
	def CreateHtml
		@HtmlValue = htmlspecialchars(@Value)
		@Html = ''
		
		if (self.IsCompatible)
			if (isset(@get['fcksource']) and @get['fcksource'] == "true")
				filevar = 'fckeditor.original.html'
			else
				filevar = 'fckeditor.html'
			end
			
			linkvar = "#{@BasePath}editor/#{filevar }?InstanceName=#{@InstanceName}"
			
			if (@ToolbarSet != '')
				linkvar += "&amp;Toolbar=#{@ToolbarSet}"
			end
			
			# Render the linked hidden field.
			@Html += "<input type=\"hidden\" id=\"#{@InstanceName}\" name=\"#{@InstanceName}\" value=\"#{@HtmlValue}\" style=\"display:none\" />"
			
			# Render the configurations hidden field.
			@Html += "<input type=\"hidden\" id=\"#{@InstanceName}___Config\" value=\"" + self.GetConfigFieldString + "\" style=\"display:none\" />"
			
			# Render the editor IFRAME.
			@Html += "<iframe id=\"#{@InstanceName}___Frame\" src=\"#{linkvar}\" width=\"#{@Width}\" height=\"#{@Height}\" frameborder=\"0\" scrolling=\"no\"></iframe>"
		else
			if (strpos(@Width, '%') === false)
				@Width = @Width + 'px'
			else
				@Width = @Width
			end
			
			if (strpos(@Height, '%') === false)
				@Height = @Height.to_s + 'px'
			else
				@Height = @Height
			end
			
			@Html += "<textarea name=\"#{@InstanceName}\" rows=\"4\" cols=\"40\" style=\"width: #{@Width}; height: #{@Height}\">#{@HtmlValue}</textarea>"
		end

		return @Html
	end
	
	# Returns true if browser is compatible with FCKeditor.
	#
	# @return boolean
	def IsCompatible
		sAgent = @useragent
		
		if (strpos(sAgent, 'MSIE') != false and strpos(sAgent, 'mac') == false and strpos(sAgent, 'Opera') == false)
			iVersion = substr(sAgent, strpos(sAgent, 'MSIE') + 5, 3).to_f
			return (iVersion >= 5.5)
		elsif (strpos(sAgent, 'Gecko/') != false)
			iVersion = substr(sAgent, strpos(sAgent, 'Gecko/') + 6, 8)
			return (iVersion.to_i >= 20030210)
		elsif (strpos(sAgent, 'Opera/') != false)
			fVersion = substr(sAgent, strpos(sAgent, 'Opera/') + 6, 4)
			return (fVersion >= 9.5)
		elsif sAgent and sAgent.match(/AppleWebKit\/([0-9]+)/)
			matches = sAgent.match(/AppleWebKit\/([0-9]+)/)
			return (matches[1].to_i >= 522)
		else
			return false
		end
	end
	
	# Get settings from Config array as a single string.
	#
	# @access protected
	# @return string
	def GetConfigFieldString
		sParams = ''
		bFirst = true
		
		@Config.each do |sKey, sValue|
			if (bFirst == false)
				sParams += '&amp;'
			else
				bFirst = false
			end
			
			if (sValue === true)
				sParams += self.EncodeConfig(sKey) + '=true'
			elsif ( sValue === false )
				sParams += self.EncodeConfig(sKey) + '=false'
			else
				sParams += self.EncodeConfig(sKey) + '=' . self.EncodeConfig(sValue)
			end
		end
		
		return sParams
	end
	
	# Encode characters that may break the configuration string
	# generated by GetConfigFieldString().
	#
	# @access protected
	# @param string $valueToEncode
	# @return string
	def EncodeConfig(valueToEncode)
		chars = {
			'&' => '%26',
			'=' => '%3D',
			'"' => '%22'
		}
		
		return strtr(valueToEncode, chars)
	end
	
	def Value=(newvalue)
		@Value = newvalue
	end
	
	def Height=(newheight)
		@Height = newheight
	end
	
	def Width=(newwidth)
		@Width = newwidth
	end
end